Triggers


Copy page

Send payloads to your system based on external events

Overview
Triggers act as a notification system for your AI applications, enabling your agents to respond dynamically to external events occurring within your integrations.

When these events take place, triggers capture relevant information and deliver structured payloads directly to your system, facilitating timely and context-aware responses.

For instance, imagine building a Slack bot designed to generate humorous responses to messages from your co-workers. To achieve this, your application needs to receive notifications whenever someone posts a new message in a specific Slack channel. Triggers fulfill this role by listening for these events and promptly notifying your system, allowing your bot to respond appropriately.

Triggers Overview

Triggers through Composio
Composio supports two primary methods for delivering these payloads:

Webhooks: HTTP POST requests sent to a publicly accessible URL that you configure. Webhooks are ideal for scenarios where your application needs to handle events asynchronously and independently from the event source.

Websockets: Persistent, real-time connections that push event data directly to your application. Websockets are suitable for applications requiring immediate, continuous, and low-latency communication.

Managing triggers
Before proceeding, ensure you’ve created an integration and established a connection to your external account (e.g., Slack, GitHub).

Adding Integrations
You need to have an integration set up in order to listen on it’s triggers. Learn how to set it up here.

Enable the Trigger
Enable the “New Message Received” trigger for your Slack app through the dashboard, CLI, or code.

Code
CLI
Dashboard

Python

TypeScript

from composio_openai import ComposioToolSet
toolset = ComposioToolSet()
user_id = "default" # User ID referencing an entity retrieved from application logic
entity = toolset.get_entity(id=user_id)
triggers = toolset.get_trigger("SLACK_RECEIVE_MESSAGE")
res = entity.enable_trigger(
    app=App.SLACK,
    trigger_name="SLACK_RECEIVE_MESSAGE",
    config={}
)
print(res["status"])
Specifying Trigger Configuration
Some triggers expect certain configuration to set the correct events. You can inspect and add these properties while enabling the triggers.

1
Viewing the configuration

Python

TypeScript

# Using same imports as above
trigger = toolset.get_trigger("GITHUB_STAR_ADDED_EVENT")
print(trigger.config.model_dump_json(indent=4))
Expected properties focus

{
    "properties": {
        "owner": {
            "description": "Owner of the repository",
            "title": "Owner",
            "default": null,
            "type": "string"
        },
        "repo": {
            "description": "Repository name",
            "title": "Repo",
            "default": null,
            "type": "string"
        }
    },
    "title": "WebhookConfigSchema",
    "type": "object",
    "required": [
        "owner",
        "repo"
    ]
}
3
Specifying the configuration

Python

TypeScript

response = entity.enable_trigger(
    app=App.GITHUB,
    trigger_name="GITHUB_PULL_REQUEST_EVENT",
    config={"owner": "composiohq", "repo": "composio"},
)
Listeners
Once you have the triggers set up, you can specify listener functions using websockets through the SDK or webhooks.

Specifying Listeners through Websockets
We create a listener and then define a callback function that executes when a listener recieves a payload.


Python

TypeScript

listener = toolset.create_trigger_listener()
@listener.callback(
    filters={
        "trigger_name": "SLACK_RECEIVE_MESSAGE",
    }
)
def handle_slack_message(event):
    print(event)
listener.wait_forever()
Specifying Listeners through Webhooks
Assuming you’ve already set up a trigger as discussed in previous steps, here’s how you can use webhooks instead to listen in on new events happening in an app.

1
Configure Webhook URL
To receive trigger events via webhooks, you need to configure a publicly accessible URL where Composio can send the event payloads. This URL should point to an endpoint in your application that can process incoming webhook requests.

2
Listening on the webhooks
To demonstrate, here’s an example of a server to handle incoming webhook requests.


Python

TypeScript

from fastapi import FastAPI, Request
from typing import Dict, Any
import uvicorn
import json
app = FastAPI(title="Webhook Demo")
@app.post("/webhook")
async def webhook_handler(request: Request):
    # Get the raw payload
    payload = await request.json()
    
    # Log the received webhook data
    print("Received webhook payload:")
    print(json.dumps(payload, indent=2))
    
    # Return a success response
    return {"status": "success", "message": "Webhook received"}
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
To test out webhooks locally, use an SSH tunnel like ngrok
Demo: Roast Slack Messages
Let’s build a fun bot that generates snarky greentext responses to Slack messages using gpt-4.5.

1
Set up the FastAPI Server
First, let’s create a FastAPI server to handle webhook events:

from fastapi import FastAPI, Request
from openai import OpenAI
from composio_openai import ComposioToolSet, App, Action
from dotenv import load_dotenv
import uvicorn
load_dotenv()
app = FastAPI()
client = OpenAI()
toolset = ComposioToolSet()
entity = toolset.get_entity(id="default")

2
Track Responded Threads
Create a set to avoid duplicate responses:

# Set to keep track of threads we've already responded to
responded_threads = set()

3
Implement Response Generation
Create a function to generate snarky responses using gpt-4.5. We’ll also set up a preprocessor to handle Slack-specific message parameters:

async def generate_response(payload: Dict[str, Any]):
    ts = payload.get("data", {}).get("ts", "")
    thread_ts = payload.get("data", {}).get("thread_ts", ts)
    channel = payload.get("data", {}).get("channel", "")
    
    # Skip if already responded
    if thread_ts in responded_threads:
        return
    
    responded_threads.add(thread_ts)
    
    # Preprocessor to automatically inject Slack-specific parameters
    def slack_send_message_preprocessor(inputs: Dict[str, Any]) -> Dict[str, Any]:
        inputs["thread_ts"] = ts          # Ensure reply goes to the correct thread
        inputs["channel"] = channel       # Target the specific channel
        inputs["mrkdwn"] = False         # Disable markdown for greentext formatting
        return inputs

4
Configure the tools
Set up the tools for sending Slack messages. We attach our preprocessor to automatically handle message threading and formatting:

# Configure tools with the preprocessor to handle Slack-specific parameters
tools = toolset.get_tools(
    [Action.SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL],
    processors={
        "pre": {
            Action.SLACK_SENDS_A_MESSAGE_TO_A_SLACK_CHANNEL: slack_send_message_preprocessor
        }
    }
)
response = client.chat.completions.create(
    model="gpt-4.5-preview",
    messages=[
        {"role": "system", "content": "Given a slack text. Generate a snarky greentext response mocking the user. Render the response in ``` codeblocks"},
        {"role": "user", "content": payload.get("data", {}).get("text")}
    ],
    tools=tools,
    tool_choice="required"
)
toolset.handle_tool_calls(response, entity_id="default")

The preprocessor ensures that every message is automatically configured with the correct thread, channel, and formatting settings, reducing the chance of misconfigured responses.

5
Create Webhook Handler
Set up the webhook endpoint to process incoming messages:

@app.post("/webhook")
async def webhook_handler(request: Request):
    payload = await request.json()
    if payload.get("type") == "slack_receive_message":
        channel = payload.get("data", {}).get("channel")
        if channel == "YOUR_CHANNEL_ID":  # Replace with your channel ID
            await generate_response(payload)
    return {"status": "success", "message": "Webhook received"}
uvicorn.run(app, host="0.0.0.0", port=8000)

Testing Locally
Run your server locally and use ngrok to expose it:

# Start your FastAPI server
python webhook.py
# In another terminal, start ngrok
ngrok http 8000

Remember to update your webhook URL in the Composio dashboard with your ngrok URL.

Troubleshooting
If you encounter issues with triggers or webhook listeners, you can use the Composio dashboard to inspect detailed trigger logs. The dashboard allows you to review event payloads, identify errors, and manually resend events for testing purposes.

Access the trigger logs here

Was this page helpful?
Yes
No
Edit this page
Previous
Introduction

Next
Built with





tar A Repository on GitHub
In this example, we will use Gemini to star a repository on GitHub using Composio Tools

1
Install Packages
Python

pip install composio-gemini
2
Import Libraries & Initialize ComposioToolSet & Gemini
Python

from google.genai import types
from google import genai
from composio_gemini import Action, ComposioToolSet, App
client = genai.Client(api_key="<gemini-api-key>")
toolset = ComposioToolSet(api_key="<composio-api-key>")
3
Connect Your GitHub Account
You need to have an active GitHub Integration. Learn how to do this here

CLI

Python

composio login 
composio add github
Don’t forget to set your COMPOSIO_API_KEY and GEMINI_API_KEY in your environment variables.

4
Get All GitHub Tools & Create Config
You can get all the tools for a given app or specific actions as shown below. Learn more here

Python

tools = toolset.get_tools(
    apps=[
        App.GITHUB
    ]
)
config = types.GenerateContentConfig(tools=tools)
5
Execute the Agent
Python

chat = client.chats.create(model="gemini-2.0-flash", config=config)
response = chat.send_message(
    "Can you star composiohq/composio repository on github",
)
print(response.text)
Was this page helpful?
Yes
No
Edit this page
Previous
🦜🔗 Using Composio With LangChain

Next
API Reference

V1

API Keys

Auth

Client

Team

Actions
GET
List action tags
GET
List action enums
GET
List user files
POST
Create file upload url

Actions
GET
List actions with complete details
GET
List actions
POST
Execute an action
POST
Get action inputs
GET
Get single action
POST
Execute with HTTP Client

Action V2 Logs

Apps
GET
List app categories
GET
List app enums

Apps
GET
List apps
GET
Get single app
GET
Get Open API Specs
DEL
Delete Open API Spec Tool
POST
App Controller Send Email To Client
GET
Get Open API Spec Status

CLI

Projects

Payment

Connections
GET
List connections
POST
Initiate connection
PATCH
Update connection data
GET
Get single connection
DEL
Delete connection
GET
Get Auth credentials
POST
Disable connection
POST
Enable connection

Connections

Connectionsv2

Integrations

Integrations V2

Health

Logs

Logs

Mcp

Triggers
GET
List triggers
POST
Update new webhook
POST
Enable trigger
GET
Get active triggers
PATCH
Switch trigger instance status
POST
Disable trigger
DEL
Delete trigger
POST
Set callback url
GET
Get webhook url
GET
Get logs
GET
Get trigger info

Triggers
GET
List trigger enums

URL Shortener

Admin

Analytics

Event Logs

V3
API Reference
V1
API Keys
List api keys

GET
https://backend.composio.dev/api/v1/api_keys
GET
/api/v1/api_keys

cURL

curl https://backend.composio.dev/api/v1/api_keys \
     -H "x-api-key: <x-api-key>"
Try it
200

[
  {
    "id": "foo",
    "name": "foo",
    "createdAt": "foo",
    "updatedAt": "foo",
    "key": "foo",
    "isHidden": true,
    "member": {},
    "lastUsed": "foo"
  }
]
Headers
x-api-key
string
Required
Response
id
string
The ID of the API key

name
string
The name of the API key

createdAt
string
format: "\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d.\d+Z?"
The creation date of the API key

updatedAt
string
format: "\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d.\d+Z?"
The last update date of the API key

key
string
The generated API key

isHidden
boolean
Whether the API key is hidden

member
object
The member of the API key


Show 0 properties
lastUsed
string
Optional
format: "\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d.\d+Z?"
The last used date of the API key

Was this page helpful?
Yes
No
Generate api key

Next
